name: Deploy Telegram Bot to Azure Container App

on:
  release:
    types: [prereleased, released]
    branches:
      - develop
      - test
  push:
    branches: 
      - master
      - pre-prod
      - prod
  pull_request:
    types: [closed]
    branches: [master, prod]
  workflow_dispatch:

permissions: 
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set deployment info
        id: set_deployment_info
        run: |
          # Validate release events
          if [ "${{ github.event_name }}" == "release" ] && \
             [[ "${{ github.ref }}" != "refs/heads/develop" && "${{ github.ref }}" != "refs/heads/test" ]]; then
            echo "Error: Releases are only allowed on develop and test branches"
            exit 1
          fi

          # Set common container app name
          echo "CONTAINER_APP_NAME=container-app-bot" >> $GITHUB_OUTPUT

          # Determine environment and revision suffix based on branch
          case "${{ github.ref }}" in
            refs/heads/develop)
              echo "STAGE=dev" >> $GITHUB_OUTPUT
              echo "REVISION_SUFFIX=dev" >> $GITHUB_OUTPUT
              echo "ENV_PREFIX=alpha" >> $GITHUB_OUTPUT
              echo "SCALE_TO_ZERO=true" >> $GITHUB_OUTPUT
              ;;
            refs/heads/test)
              echo "STAGE=test" >> $GITHUB_OUTPUT
              echo "REVISION_SUFFIX=test" >> $GITHUB_OUTPUT
              echo "ENV_PREFIX=beta" >> $GITHUB_OUTPUT
              echo "SCALE_TO_ZERO=true" >> $GITHUB_OUTPUT
              ;;
            refs/heads/master|refs/heads/pre-prod)
              echo "STAGE=staging" >> $GITHUB_OUTPUT
              echo "REVISION_SUFFIX=staging" >> $GITHUB_OUTPUT
              echo "ENV_PREFIX=staging" >> $GITHUB_OUTPUT
              echo "SCALE_TO_ZERO=true" >> $GITHUB_OUTPUT
              ;;
            refs/heads/prod)
              echo "STAGE=prod" >> $GITHUB_OUTPUT
              echo "REVISION_SUFFIX=prod" >> $GITHUB_OUTPUT
              echo "ENV_PREFIX=prod" >> $GITHUB_OUTPUT
              echo "SCALE_TO_ZERO=false" >> $GITHUB_OUTPUT
              ;;
          esac

          # Set version tag based on event type and branch
          if [ "${{ github.event_name }}" == "release" ]; then
            case "${{ github.ref }}" in
              refs/heads/develop)
                VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^[^0-9]*//')
                echo "RELEASE_TAG=alpha-${VERSION}" >> $GITHUB_OUTPUT
                ;;
              refs/heads/test)
                VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^[^0-9]*//')
                echo "RELEASE_TAG=beta-${VERSION}" >> $GITHUB_OUTPUT
                ;;
            esac
          elif [ "${{ github.event_name }}" == "push" ]; then
            echo "RELEASE_TAG=${ENV_PREFIX}-$(date +%Y%m%d)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "RELEASE_TAG=merged-${ENV_PREFIX}-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_TAG=manual-${ENV_PREFIX}-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          fi

          echo "IMAGE_TAG=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Print deployment info
        run: |
          echo "Deployment Information:"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          echo "Stage: ${{ steps.set_deployment_info.outputs.STAGE }}"
          echo "Container App: ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }}"
          echo "Revision Suffix: ${{ steps.set_deployment_info.outputs.REVISION_SUFFIX }}"
          echo "Release Tag: ${{ steps.set_deployment_info.outputs.RELEASE_TAG }}"
          echo "Image Tag: ${{ steps.set_deployment_info.outputs.IMAGE_TAG }}"
          echo "Scale to Zero: ${{ steps.set_deployment_info.outputs.SCALE_TO_ZERO }}"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI extension for Container Apps
        run: az extension add --name containerapp --upgrade

      - name: Build and push image to ACR
        run: |
          az acr build --registry ca20a502fbd8acr \
            --image ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --file Dockerfile .
      
      - name: Update Container App Revision
        run: |
          # Get current revision for this branch
          CURRENT_REVISION=$(az containerapp revision list \
            --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            --resource-group container-app-rsgp \
            --query "[?contains(name, '${{ steps.set_deployment_info.outputs.REVISION_SUFFIX }}')].name" -o tsv)

          # Set scale rules based on branch
          if [ "${{ steps.set_deployment_info.outputs.SCALE_TO_ZERO }}" == "true" ]; then
            SCALE_RULE="--min-replicas 0 --max-replicas 1"
          else
            SCALE_RULE="--min-replicas 1 --max-replicas 1"
          fi

          # Update or create new revision
          az containerapp update \
            --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            --resource-group container-app-rsgp \
            --image ca20a502fbd8acr.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --set-env-vars RELEASE_TAG=${{ steps.set_deployment_info.outputs.RELEASE_TAG }} \
                          STAGE=${{ steps.set_deployment_info.outputs.STAGE }} \
                          PYTHONUNBUFFERED=1 \
            --revision-suffix "${{ steps.set_deployment_info.outputs.REVISION_SUFFIX }}" \
            $SCALE_RULE

          # Wait for new revision to be active
          sleep 30

          # Clean up old revision if it exists and is different
          if [ ! -z "$CURRENT_REVISION" ] && [ "$CURRENT_REVISION" != "${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }}--${{ steps.set_deployment_info.outputs.REVISION_SUFFIX }}" ]; then
            az containerapp revision deactivate \
              --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
              --resource-group container-app-rsgp \
              --revision $CURRENT_REVISION

            az containerapp revision delete \
              --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
              --resource-group container-app-rsgp \
              --revision $CURRENT_REVISION \
              --yes
          fi