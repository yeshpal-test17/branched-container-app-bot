name: Deploy Telegram Bot to Azure Container App

on:
  release:
    types: [prereleased, released]
  push:
    branches: [master, prod]
  pull_request:
    types: [closed]
    branches: [master, prod]
  workflow_dispatch:

permissions: 
  contents: read

env:
  ACR_NAME: ca20a502fbd8acr
  RESOURCE_GROUP: container-app-rsgp
  CONTAINER_APP_NAME: branched-container-app-bot

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

          
      - name: Set deployment info
        id: set_deployment_info
        run: |
            # For releases, use the target branch instead of the tag ref
            if [ "${{ github.event_name }}" == "release" ]; then
              BRANCH_REF="refs/heads/${{ github.event.release.target_commitish }}"
              TAG_NAME="${{ github.event.release.tag_name }}"
              
              # Validate tag format based on branch
              if [[ "$BRANCH_REF" == "refs/heads/develop" ]]; then
                if [[ ! "$TAG_NAME" =~ ^alpha-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                  echo "Error: Invalid tag format for develop branch. Must be 'alpha-x.y.z' where x.y.z is semantic versioning."
                  exit 1
                fi
                echo "RELEASE_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
              elif [[ "$BRANCH_REF" == "refs/heads/test" ]]; then
                if [[ ! "$TAG_NAME" =~ ^beta-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                  echo "Error: Invalid tag format for test branch. Must be 'beta-x.y.z' where x.y.z is semantic versioning."
                  exit 1
                fi
                echo "RELEASE_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
              else
                echo "Error: Releases are only allowed from develop (alpha) or test (beta) branches."
                exit 1
              fi
            else
              BRANCH_REF="${{ github.ref }}"
            fi
  
            # Set environment variables based on branch
            case "$BRANCH_REF" in
              "refs/heads/develop")
                echo "STAGE=dev" >> $GITHUB_OUTPUT
                echo "CONTAINER_NAME=container-app-bot-dev" >> $GITHUB_OUTPUT
                echo "BOT_TOKEN_SECRET=dev-bot-token" >> $GITHUB_OUTPUT
                echo "IMAGE_TAG=dev-latest" >> $GITHUB_OUTPUT
                ;;
              "refs/heads/test")
                echo "STAGE=test" >> $GITHUB_OUTPUT
                echo "CONTAINER_NAME=container-app-bot-test" >> $GITHUB_OUTPUT
                echo "BOT_TOKEN_SECRET=test-bot-token" >> $GITHUB_OUTPUT
                echo "IMAGE_TAG=test-latest" >> $GITHUB_OUTPUT
                ;;
              "refs/heads/master")
                echo "STAGE=staging" >> $GITHUB_OUTPUT
                echo "CONTAINER_NAME=container-app-bot-staging" >> $GITHUB_OUTPUT
                echo "BOT_TOKEN_SECRET=master-bot-token" >> $GITHUB_OUTPUT
                echo "IMAGE_TAG=staging-latest" >> $GITHUB_OUTPUT
                ;;
              "refs/heads/prod")
                echo "STAGE=prod" >> $GITHUB_OUTPUT
                echo "CONTAINER_NAME=container-app-bot-prod" >> $GITHUB_OUTPUT
                echo "BOT_TOKEN_SECRET=prod-bot-token" >> $GITHUB_OUTPUT
                echo "IMAGE_TAG=prod-latest" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "STAGE=dev" >> $GITHUB_OUTPUT
                echo "CONTAINER_NAME=container-app-bot-dev" >> $GITHUB_OUTPUT
                echo "BOT_TOKEN_SECRET=dev-bot-token" >> $GITHUB_OUTPUT
                echo "IMAGE_TAG=dev-latest" >> $GITHUB_OUTPUT
                ;;
            esac
  
            # Set release tag for other events
            if [ "${{ github.event_name }}" == "push" ]; then
              echo "RELEASE_TAG=pushed-into-${{ github.ref_name }}" >> $GITHUB_OUTPUT
            elif [ "${{ github.event_name }}" == "pull_request" ]; then
              echo "RELEASE_TAG=merged-into-${{ github.base.ref }}" >> $GITHUB_OUTPUT
            elif [ "${{ github.event_name }}" != "release" ]; then
              echo "RELEASE_TAG=manual-trigger" >> $GITHUB_OUTPUT
            fi
      - name: Build and push image to ACR
        run: |
          # Clean up old images with the same tag if they exist
          az acr repository delete \
            --name ${{ env.ACR_NAME }} \
            --image ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --yes || true

          # Build and push new image
          az acr build --registry ${{ env.ACR_NAME }} \
            --image ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --file Dockerfile .
      
      - name: Update Azure Container App
        run: |
              az containerapp update \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --container-name ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }} \
                --image ${{ env.ACR_NAME }}.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
                --set-env-vars \
                  RELEASE_TAG=${{ steps.set_deployment_info.outputs.RELEASE_TAG }} \
                  STAGE=${{ steps.set_deployment_info.outputs.STAGE }} \
                  PYTHONUNBUFFERED=1 \
                  BOT_TOKEN=secretref:${{ steps.set_deployment_info.outputs.BOT_TOKEN_SECRET }} \
                  API_ID=secretref:api-id \
                  API_HASH=secretref:api-hash


      - name: Final Variables Summary
        run: |
          echo "=== FINAL WORKFLOW VARIABLES SUMMARY ==="
          echo "Environment Variables:"
          echo "  ACR_NAME: ${{ env.ACR_NAME }}"
          echo "  RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}"
          echo "  CONTAINER_APP_NAME: ${{ env.CONTAINER_APP_NAME }}"
          echo ""
          echo "Deployment Info Variables:"
          echo "  Stage: ${{ steps.set_deployment_info.outputs.STAGE }}"
          echo "  Container Name: ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}"
          echo "  Release Tag: ${{ steps.set_deployment_info.outputs.RELEASE_TAG }}"
          echo "  Image Tag: ${{ steps.set_deployment_info.outputs.IMAGE_TAG }}"
          echo "  Bot Token Secret: ${{ steps.set_deployment_info.outputs.BOT_TOKEN_SECRET }}"
          echo ""
          echo "Container Image:"
          echo "  Full Image Path: ${{ env.ACR_NAME }}.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }}"