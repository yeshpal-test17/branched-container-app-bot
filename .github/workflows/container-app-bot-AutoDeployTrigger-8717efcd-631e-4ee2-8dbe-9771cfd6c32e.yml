name: Deploy Telegram Bot to Azure Container Apps

on:
  release:
    types: [prereleased, released]
  push:
    branches: [master, prod, develop, test]
  pull_request:
    types: [closed]
    branches: [master, prod, develop, test]

permissions: 
  contents: read
  
env:
  ACR_NAME: ca20a502fbd8acr
  RESOURCE_GROUP: container-app-rsgp
  BRANCHED_CONTAINER_APP_NAME: branched-container-app-bot
  PROD_CONTAINER_APP_NAME: m21-live

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ steps.set_deployment_info.outputs.IS_PROD == 'true' && secrets.AZURE_CREDENTIALS_M21LIVE || secrets.AZURE_CREDENTIALS }}

      - name: Set deployment info
        id: set_deployment_info
        run: |
          # Existing deployment info logic remains the same...
          # [Previous set_deployment_info content...]

      - name: Build and push image to ACR
        run: |
          # Clean up old images with the same tag
          az acr repository delete \
            --name ${{ env.ACR_NAME }} \
            --image ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --yes || true

          # Build and push new image
          az acr build \
            --registry ${{ env.ACR_NAME }} \
            --image ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --file Dockerfile \
            .

      - name: Deploy and Manage Container App
        run: |
          # Get timestamp for new revision
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          NEW_REVISION="${{ steps.set_deployment_info.outputs.STAGE }}-${TIMESTAMP}"
          
          if [ "${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }}" == "${{ env.PROD_CONTAINER_APP_NAME }}" ]; then
            # Production deployment (single container)
            echo "Deploying production revision: ${NEW_REVISION}"
            
            # Deploy new revision with zero traffic
            az containerapp revision create \
              --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --revision-suffix "${NEW_REVISION}" \
              --min-replicas ${{ steps.set_deployment_info.outputs.MIN_REPLICAS }} \
              --max-replicas ${{ steps.set_deployment_info.outputs.MAX_REPLICAS }} \
              --container-name container-app-bot-prod \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
              --cpu 0.5 --memory 1.0Gi \
              --env-vars \
                "RELEASE_TAG=${{ steps.set_deployment_info.outputs.RELEASE_TAG }}" \
                "STAGE=${{ steps.set_deployment_info.outputs.STAGE }}" \
                "PYTHONUNBUFFERED=1" \
              --secrets \
                "bottokern=${{ secrets.BOT_TOKEN }}" \
                "apiid=${{ secrets.API_ID }}" \
                "apihash=${{ secrets.API_HASH }}" \
              --target-port 8080 \
              --ingress external \
              --probe-path /health \
              --probe-protocol HTTP \
              --probe-interval 30 \
              --probe-timeout 10 \
              --probe-retries 3 \
              --traffic-weight 0

            # Wait for health check
            echo "Waiting for health checks to pass..."
            sleep 60

            # Check health endpoint
            HEALTH_CHECK_URL=$(az containerapp show \
              --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --query "properties.configuration.ingress.fqdn" -o tsv)
            
            HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${HEALTH_CHECK_URL}/health)
            
            if [ "$HEALTH_STATUS" == "200" ]; then
              echo "Health check passed. Shifting traffic to new revision."
              
              # Get current active revision
              CURRENT_REVISION=$(az containerapp revision list \
                --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --query "[?properties.active].{name:name}[-1].name" -o tsv)
              
              # Shift traffic to new revision
              az containerapp revision set-traffic \
                --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --revision-weight "${NEW_REVISION}=100"
              
              # Keep only the previous revision
              if [ -n "$CURRENT_REVISION" ]; then
                az containerapp revision list \
                  --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                  --resource-group ${{ env.RESOURCE_GROUP }} \
                  --query "[?properties.active].{name:name}" -o tsv | \
                while read -r revision; do
                  if [ "$revision" != "$CURRENT_REVISION" ] && [ "$revision" != "${NEW_REVISION}" ]; then
                    echo "Deleting old revision: $revision"
                    az containerapp revision deactivate \
                      --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                      --resource-group ${{ env.RESOURCE_GROUP }} \
                      --revision $revision
                  fi
                done
              fi
            else
              echo "Health check failed. Rolling back deployment."
              az containerapp revision deactivate \
                --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --revision "${NEW_REVISION}"
              exit 1
            fi
            
          else
            # Development deployment (multi-container)
            echo "Deploying development revision: ${NEW_REVISION}"
            
            # Update development container app with all three containers
            az containerapp update \
              --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --revision-suffix "${NEW_REVISION}" \
              --min-replicas ${{ steps.set_deployment_info.outputs.MIN_REPLICAS }} \
              --max-replicas ${{ steps.set_deployment_info.outputs.MAX_REPLICAS }} \
              --containers \
                "name=container-app-bot-dev,image=${{ env.ACR_NAME }}.azurecr.io/container-app-bot-dev:dev-latest,cpu=0.5,memory=1.0Gi,env=[{name=RELEASE_TAG,value=${{ steps.set_deployment_info.outputs.RELEASE_TAG }}},{name=STAGE,value=dev},{name=PYTHONUNBUFFERED,value=1},{name=BOT_TOKEN,secretRef=dev-bot-token},{name=API_ID,secretRef=api-id},{name=API_HASH,secretRef=api-hash}]" \
                "name=container-app-bot-test,image=${{ env.ACR_NAME }}.azurecr.io/container-app-bot-test:test-latest,cpu=0.5,memory=1.0Gi,env=[{name=RELEASE_TAG,value=${{ steps.set_deployment_info.outputs.RELEASE_TAG }}},{name=STAGE,value=test},{name=PYTHONUNBUFFERED,value=1},{name=BOT_TOKEN,secretRef=test-bot-token},{name=API_ID,secretRef=api-id},{name=API_HASH,secretRef=api-hash}]" \
                "name=container-app-bot-staging,image=${{ env.ACR_NAME }}.azurecr.io/container-app-bot-staging:staging-latest,cpu=0.5,memory=1.0Gi,env=[{name=RELEASE_TAG,value=${{ steps.set_deployment_info.outputs.RELEASE_TAG }}},{name=STAGE,value=staging},{name=PYTHONUNBUFFERED,value=1},{name=BOT_TOKEN,secretRef=master-bot-token},{name=API_ID,secretRef=api-id},{name=API_HASH,secretRef=api-hash}]"
            
            # Keep latest 3 revisions for development
            az containerapp revision list \
              --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --query "[?properties.active].{name:name, createdTime:properties.createdTime} | sort_by(@, &createdTime)" -o json | \
              jq -r '.[:-3][].name' | while read -r old_revision; do
              if [ -n "$old_revision" ]; then
                echo "Deactivating old revision: $old_revision"
                az containerapp revision deactivate \
                  --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                  --resource-group ${{ env.RESOURCE_GROUP }} \
                  --revision "$old_revision"
              fi
            done
          fi