name: Deploy Telegram Bot to Azure Container Apps

on:
  release:
    types: [prereleased, released]
  push:
    branches: [master, prod]
  pull_request:
    types: [closed]
    branches: [master, prod, develop, test]

permissions: 
  contents: read
  
env:
  ACR_NAME: ca20a502fbd8acr
  RESOURCE_GROUP: container-app-rsgp
  BRANCHED_CONTAINER_APP_NAME: m21-development
  PROD_CONTAINER_APP_NAME: m21-live

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ steps.set_deployment_info.outputs.IS_PROD == 'true' && secrets.AZURE_CREDENTIALS_M21LIVE || secrets.M21_DEVELOPMENT_CONTAINERAPPBOTRELEASESP }}

      - name: Set Development Scale Rule
        if: steps.set_deployment_info.outputs.STAGE == 'dev'
        run: |
                    echo "Setting up development environment scale rule..."
                    
                    az containerapp update \
                      --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                      --resource-group ${{ env.RESOURCE_GROUP }} \
                      --min-replicas 1 \
                      --scale-rule-name "dev-keep-alive" \
                      --scale-rule-type cpu \
                      --scale-rule-metadata type=Utilization value=1


      - name: Emergency Revision Cleanup
        run: |
                        echo "Performing emergency revision cleanup..."
                        
                        # Get all active revisions
                        ACTIVE_REVISIONS=$(az containerapp revision list \
                          -n ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                          -g ${{ env.RESOURCE_GROUP }} \
                          --query "[?properties.active].{name:name,replicas:properties.replicas}" -o json)
                        
                        # Count active revisions
                        ACTIVE_COUNT=$(echo "$ACTIVE_REVISIONS" | jq length)
                        
                        if [ $ACTIVE_COUNT -gt 1 ]; then
                          echo "WARNING: Found $ACTIVE_COUNT active revisions"
                          
                          # Find any revision with more than expected replicas
                          echo "$ACTIVE_REVISIONS" | jq -r '.[]' | while read -r revision; do
                            REPLICA_COUNT=$(echo "$revision" | jq -r '.replicas')
                            REVISION_NAME=$(echo "$revision" | jq -r '.name')
                            
                            if [ $REPLICA_COUNT -gt ${{ steps.set_deployment_info.outputs.MAX_REPLICAS }} ]; then
                              echo "Found revision $REVISION_NAME with $REPLICA_COUNT replicas (exceeds maximum)"
                              
                              # Force update the replica count
                              az containerapp revision deactivate \
                                --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                                --resource-group ${{ env.RESOURCE_GROUP }} \
                                --revision "$REVISION_NAME"
                              
                              echo "Deactivated revision $REVISION_NAME"
                            fi
                          done
                        fi
              
              # Add this right after the Azure Login step and before the Clean up old revisions step

      - name: Clean up old revisions
        run: |
          echo "Cleaning up old revisions..."
          
          # Get all revisions
          REVISIONS=$(az containerapp revision list \
            -n ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            -g ${{ env.RESOURCE_GROUP }} \
            --query "[].{name:name,active:properties.active}" -o json)
          
          # Count active revisions
          ACTIVE_COUNT=$(echo "$REVISIONS" | jq '[.[] | select(.active == true)] | length')
          
          if [ $ACTIVE_COUNT -gt 0 ]; then
            echo "Found $ACTIVE_COUNT active revisions. Deactivating all except latest..."
            
            # Get latest revision name
            LATEST_REVISION=$(echo "$REVISIONS" | jq -r '[.[] | select(.active == true)] | sort_by(.name) | last.name')
            
            # Deactivate all revisions except latest
            echo "$REVISIONS" | jq -r '.[] | select(.active == true) | .name' | while read revision; do
              if [ "$revision" != "$LATEST_REVISION" ]; then
                echo "Deactivating revision: $revision"
                az containerapp revision deactivate \
                  --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                  --resource-group ${{ env.RESOURCE_GROUP }} \
                  --revision "$revision"
              fi
            done
          fi

      - name: Deploy Container App
        run: |
          # Get timestamp for new revision
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          REVISION_SUFFIX="${{ steps.set_deployment_info.outputs.STAGE }}-${TIMESTAMP}"
          
          # Update container app with new revision
          az containerapp update \
            --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --revision-suffix "${REVISION_SUFFIX}" \
            --min-replicas ${{ steps.set_deployment_info.outputs.MIN_REPLICAS }} \
            --max-replicas ${{ steps.set_deployment_info.outputs.MAX_REPLICAS }} \
            --container-name ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --cpu 0.5 \
            --memory 1.0Gi \
            --set-env-vars \
              RELEASE_TAG=${{ steps.set_deployment_info.outputs.RELEASE_TAG }} \
              STAGE=${{ steps.set_deployment_info.outputs.STAGE }} \
              PYTHONUNBUFFERED=1 \
              BOT_TOKEN=secretref:${{ steps.set_deployment_info.outputs.BOT_TOKEN_SECRET }} \
              API_ID=secretref:${{ steps.set_deployment_info.outputs.IS_PROD == 'true' && 'apiid' || 'api-id' }} \
              API_HASH=secretref:${{ steps.set_deployment_info.outputs.IS_PROD == 'true' && 'apihash' || 'api-hash' }}

      - name: Configure Development Scaling
        if: steps.set_deployment_info.outputs.STAGE == 'dev'
        run: |
          echo "Configuring development environment scaling..."
          
          # Set initial scaling rule
          az containerapp update \
            --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --min-replicas 1 \
            --max-replicas 3 \
            --scale-rule-name "http-scale" \
            --scale-rule-type http \
            --scale-rule-metadata "concurrent-requests=10"
          
          # Add Azure Monitor HTTP requests metric
          MONITOR_RESOURCE_ID=$(az monitor app-insights component show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query id -o tsv)
          
          az containerapp update \
            --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --scale-rule-name "requests-idle" \
            --scale-rule-type custom \
            --scale-rule-metadata "metadata.azureMonitorMetricName=requests/count" \
            --scale-rule-metadata "metadata.azureMonitorMetricResourceUri=$MONITOR_RESOURCE_ID" \
            --scale-rule-metadata "metadata.azureMonitorMetricFilter=request/resultCode eq '200'" \
            --scale-rule-metadata "metadata.azureMonitorMetricAggregation=count" \
            --scale-rule-metadata "metadata.activationThreshold=0" \
            --scale-rule-metadata "metadata.scalingThreshold=2"
          
          # Set up auto-scale to zero after 1 hour of inactivity
          az containerapp update \
            --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --scale-rule-name "idle-scale-to-zero" \
            --scale-rule-type custom \
            --scale-rule-metadata "metadata.azureMonitorMetricName=requests/count" \
            --scale-rule-metadata "metadata.azureMonitorMetricResourceUri=$MONITOR_RESOURCE_ID" \
            --scale-rule-metadata "metadata.azureMonitorMetricFilter=request/resultCode eq '200'" \
            --scale-rule-metadata "metadata.azureMonitorMetricAggregation=count" \
            --scale-rule-metadata "metadata.activationThreshold=0" \
            --scale-rule-metadata "metadata.scalingThreshold=0" \
            --scale-rule-metadata "metadata.lastScaleEventTime=60m"

      - name: Verify Deployment
        run: |
          echo "Verifying deployment..."
          
          # Wait for deployment to stabilize
          sleep 90
          
          # Get current active revision
          ACTIVE_REVISION=$(az containerapp revision list \
            -n ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            -g ${{ env.RESOURCE_GROUP }} \
            --query "[?properties.active].{name:name,replicas:properties.replicas}[0]" -o json)
          
          echo "Current active revision:"
          echo "$ACTIVE_REVISION" | jq '.'
          
          # Verify single active revision
          ACTIVE_COUNT=$(az containerapp revision list \
            -n ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            -g ${{ env.RESOURCE_GROUP }} \
            --query "[?properties.active].length" -o tsv)
          
          if [ "$ACTIVE_COUNT" -ne 1 ]; then
            echo "‚ùå Expected exactly 1 active revision, found $ACTIVE_COUNT"
            exit 1
          fi
          
          # Verify correct revision name pattern
          REVISION_NAME=$(echo "$ACTIVE_REVISION" | jq -r '.name')
          if [[ ! "$REVISION_NAME" =~ ${{ steps.set_deployment_info.outputs.STAGE }}- ]]; then
            echo "‚ùå Revision name pattern mismatch"
            exit 1
          fi
          
          echo "‚úÖ Deployment verified successfully"
