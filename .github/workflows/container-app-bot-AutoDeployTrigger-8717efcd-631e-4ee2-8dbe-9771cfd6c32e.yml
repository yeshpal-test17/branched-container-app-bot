name: Deploy Telegram Bot to Azure Container Apps

on:
  release:
    types: [prereleased, released]
  push:
    branches: [master, prod, develop, test]
  pull_request:
    types: [closed]
    branches: [master, prod, develop, test]

permissions: 
  contents: read
  
env:
  ACR_NAME: ca20a502fbd8acr
  RESOURCE_GROUP: container-app-rsgp
  BRANCHED_CONTAINER_APP_NAME: branched-container-app-bot
  PROD_CONTAINER_APP_NAME: m21-live

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3


      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ steps.set_deployment_info.outputs.IS_PROD == 'true' && secrets.AZURE_CREDENTIALS_M21LIVE || secrets.AZURE_CREDENTIALS }}

          
      - name: Set deployment info
        id: set_deployment_info
        run: |
          # First determine if this is a release
          if [ "${{ github.event_name }}" == "release" ]; then
            # Get the release tag
            TAG_NAME="${{ github.event.release.tag_name }}"
            echo "RELEASE_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
            
            # Set image tag based on release tag
            echo "IMAGE_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
            
            # Set other variables based on the target branch
            TARGET_BRANCH="${{ github.event.release.target_commitish }}"
            case "$TARGET_BRANCH" in
              "prod")
                echo "CONTAINER_NAME=container-app-bot-prod" >> $GITHUB_OUTPUT
                echo "STAGE=prod" >> $GITHUB_OUTPUT
                echo "BOT_TOKEN_SECRET=prod-bot-token" >> $GITHUB_OUTPUT
                echo "CONTAINER_APP_NAME=${{ env.PROD_CONTAINER_APP_NAME }}" >> $GITHUB_OUTPUT
                echo "IS_PROD=true" >> $GITHUB_OUTPUT
                echo "MIN_REPLICAS=1" >> $GITHUB_OUTPUT
                echo "MAX_REPLICAS=10" >> $GITHUB_OUTPUT
                ;;
              "develop")
                echo "CONTAINER_NAME=container-app-bot-dev" >> $GITHUB_OUTPUT
                echo "STAGE=dev" >> $GITHUB_OUTPUT
                echo "BOT_TOKEN_SECRET=dev-bot-token" >> $GITHUB_OUTPUT
                echo "CONTAINER_APP_NAME=${{ env.BRANCHED_CONTAINER_APP_NAME }}" >> $GITHUB_OUTPUT
                echo "IS_PROD=false" >> $GITHUB_OUTPUT
                echo "MIN_REPLICAS=0" >> $GITHUB_OUTPUT
                echo "MAX_REPLICAS=5" >> $GITHUB_OUTPUT
                ;;
              "test")
                echo "CONTAINER_NAME=container-app-bot-test" >> $GITHUB_OUTPUT
                echo "STAGE=test" >> $GITHUB_OUTPUT
                echo "BOT_TOKEN_SECRET=test-bot-token" >> $GITHUB_OUTPUT
                echo "CONTAINER_APP_NAME=${{ env.BRANCHED_CONTAINER_APP_NAME }}" >> $GITHUB_OUTPUT
                echo "IS_PROD=false" >> $GITHUB_OUTPUT
                echo "MIN_REPLICAS=0" >> $GITHUB_OUTPUT
                echo "MAX_REPLICAS=5" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "Error: Releases are only supported from develop, test, or prod branches"
                exit 1
                ;;
            esac
            
          else
            # Handle non-release deployments
            if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
              echo "CONTAINER_NAME=container-app-bot-prod" >> $GITHUB_OUTPUT
              echo "STAGE=prod" >> $GITHUB_OUTPUT
              echo "BOT_TOKEN_SECRET=prod-bot-token" >> $GITHUB_OUTPUT
              echo "CONTAINER_APP_NAME=${{ env.PROD_CONTAINER_APP_NAME }}" >> $GITHUB_OUTPUT
              echo "IS_PROD=true" >> $GITHUB_OUTPUT
              echo "IMAGE_TAG=prod-latest" >> $GITHUB_OUTPUT
              echo "MIN_REPLICAS=1" >> $GITHUB_OUTPUT
              echo "MAX_REPLICAS=10" >> $GITHUB_OUTPUT
            else
              case "${{ github.ref }}" in
                "refs/heads/develop")
                  echo "CONTAINER_NAME=container-app-bot-dev" >> $GITHUB_OUTPUT
                  echo "STAGE=dev" >> $GITHUB_OUTPUT
                  echo "BOT_TOKEN_SECRET=dev-bot-token" >> $GITHUB_OUTPUT
                  echo "CONTAINER_APP_NAME=${{ env.BRANCHED_CONTAINER_APP_NAME }}" >> $GITHUB_OUTPUT
                  echo "IS_PROD=false" >> $GITHUB_OUTPUT
                  echo "IMAGE_TAG=dev-latest" >> $GITHUB_OUTPUT
                  echo "MIN_REPLICAS=0" >> $GITHUB_OUTPUT
                  echo "MAX_REPLICAS=5" >> $GITHUB_OUTPUT
                  ;;
                "refs/heads/test")
                  echo "CONTAINER_NAME=container-app-bot-test" >> $GITHUB_OUTPUT
                  echo "STAGE=test" >> $GITHUB_OUTPUT
                  echo "BOT_TOKEN_SECRET=test-bot-token" >> $GITHUB_OUTPUT
                  echo "CONTAINER_APP_NAME=${{ env.BRANCHED_CONTAINER_APP_NAME }}" >> $GITHUB_OUTPUT
                  echo "IS_PROD=false" >> $GITHUB_OUTPUT
                  echo "IMAGE_TAG=test-latest" >> $GITHUB_OUTPUT
                  echo "MIN_REPLICAS=0" >> $GITHUB_OUTPUT
                  echo "MAX_REPLICAS=5" >> $GITHUB_OUTPUT
                  ;;
                "refs/heads/master")
                  echo "CONTAINER_NAME=container-app-bot-staging" >> $GITHUB_OUTPUT
                  echo "STAGE=staging" >> $GITHUB_OUTPUT
                  echo "BOT_TOKEN_SECRET=master-bot-token" >> $GITHUB_OUTPUT
                  echo "CONTAINER_APP_NAME=${{ env.BRANCHED_CONTAINER_APP_NAME }}" >> $GITHUB_OUTPUT
                  echo "IS_PROD=false" >> $GITHUB_OUTPUT
                  echo "IMAGE_TAG=staging-latest" >> $GITHUB_OUTPUT
                  echo "MIN_REPLICAS=0" >> $GITHUB_OUTPUT
                  echo "MAX_REPLICAS=5" >> $GITHUB_OUTPUT
                  ;;
                *)
                  echo "Unsupported branch"
                  exit 1
                  ;;
              esac
            fi
          fi

          # Set release tag for non-release events
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "RELEASE_TAG=pushed-into-${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "RELEASE_TAG=merged-into-${{ github.base.ref }}" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_TAG=manual-trigger" >> $GITHUB_OUTPUT
          fi

      - name: Build and push image to ACR
        run: |
          # Clean up old images with the same tag
          az acr repository delete \
            --name ${{ env.ACR_NAME }} \
            --image ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --yes || true

          # Build and push new image
          az acr build \
            --registry ${{ env.ACR_NAME }} \
            --image ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --file Dockerfile \
            .

      - name: Manage Container App Revisions
        run: |
          # Get all revisions
          ALL_REVISIONS=$(az containerapp revision list \
            -n ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            -g ${{ env.RESOURCE_GROUP }} \
            --query "[].{name:name, active:properties.active, createdTime:properties.createdTime}" -o json)
          
          # Get timestamp for new revision
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          NEW_REVISION="${{ steps.set_deployment_info.outputs.STAGE }}-${TIMESTAMP}"
          
          # Determine secret references based on the container app
          if [ "${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }}" == "${{ env.PROD_CONTAINER_APP_NAME }}" ]; then
            API_ID_SECRET="apiid"
            API_HASH_SECRET="apihash"
            BOT_TOKEN_SECRET="bottokern"
          else
            API_ID_SECRET="api-id"
            API_HASH_SECRET="api-hash"
            BOT_TOKEN_SECRET="${{ steps.set_deployment_info.outputs.BOT_TOKEN_SECRET }}"
          fi

          # Update Container App
          echo "Creating new revision: ${NEW_REVISION}"
          az containerapp update \
            --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --container-name ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }} \
            --image ${{ env.ACR_NAME }}.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --revision-suffix "${NEW_REVISION}" \
            --min-replicas ${{ steps.set_deployment_info.outputs.MIN_REPLICAS }} \
            --max-replicas ${{ steps.set_deployment_info.outputs.MAX_REPLICAS }} \
            --set-env-vars \
              "RELEASE_TAG=${{ steps.set_deployment_info.outputs.RELEASE_TAG }}" \
              "STAGE=${{ steps.set_deployment_info.outputs.STAGE }}" \
              "PYTHONUNBUFFERED=1" \
              "BOT_TOKEN=secretref:${BOT_TOKEN_SECRET}" \
              "API_ID=secretref:${API_ID_SECRET}" \
              "API_HASH=secretref:${API_HASH_SECRET}"
          
          # Wait for new revision to be ready
          sleep 30
          
          # Manage revisions
          if [ "${{ steps.set_deployment_info.outputs.IS_PROD }}" == "true" ]; then
            # For production, keep latest 2 revisions
            az containerapp revision list \
              -n ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
              -g ${{ env.RESOURCE_GROUP }} \
              --query "[?contains(name, '${{ steps.set_deployment_info.outputs.STAGE }}-')].{name:name, createdTime:properties.createdTime} | sort_by(@, &createdTime)" -o json | \
              jq -r '.[:-2][].name' | while read -r old_revision; do
              if [ -n "$old_revision" ]; then
                echo "Deleting old revision: $old_revision"
                az containerapp revision delete \
                  --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                  --resource-group ${{ env.RESOURCE_GROUP }} \
                  --revision "$old_revision" --yes || true
              fi
            done
          else
            # For non-production, keep latest 3 revisions
            az containerapp revision list \
              -n ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
              -g ${{ env.RESOURCE_GROUP }} \
              --query "[?contains(name, '${{ steps.set_deployment_info.outputs.STAGE }}-')].{name:name, createdTime:properties.createdTime} | sort_by(@, &createdTime)" -o json | \
              jq -r '.[:-3][].name' | while read -r old_revision; do
              if [ -n "$old_revision" ]; then
                echo "Deleting old revision: $old_revision"
                az containerapp revision delete \
                  --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                  --resource-group ${{ env.RESOURCE_GROUP }} \
                  --revision "$old_revision" --yes || true
              fi
            done
          fi


          AZURE_CREDENTIALS_m21-live