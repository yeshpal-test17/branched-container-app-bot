name: Deploy Telegram Bot to Azure Container App

on:
  release:
    types: [prereleased, released]
  workflow_dispatch:

permissions: 
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set deployment info
        id: set_deployment_info
        run: |
          # For releases, use the target branch instead of the tag ref
          if [ "${{ github.event_name }}" == "release" ]; then
            BRANCH_REF="refs/heads/${{ github.event.release.target_commitish }}"
            TAG_NAME="${{ github.event.release.tag_name }}"
            # Remove any prefix if it exists
            TAG_NAME="${TAG_NAME#beta-}"
            TAG_NAME="${TAG_NAME#alpha-}"
          else
            BRANCH_REF="${{ github.ref }}"
          fi

          # Set stage and container name based on branch
          if [[ "$BRANCH_REF" == "refs/heads/test" ]]; then
            echo "STAGE=test" >> $GITHUB_OUTPUT
            echo "CONTAINER_APP_NAME=container-app-bot-test" >> $GITHUB_OUTPUT
            echo "BOT_TOKEN_SECRET=test-bot-token" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_REF" == "refs/heads/master" ]]; then
            echo "STAGE=staging" >> $GITHUB_OUTPUT
            echo "CONTAINER_APP_NAME=container-app-bot-staging" >> $GITHUB_OUTPUT
            echo "BOT_TOKEN_SECRET=bottoken" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_REF" == "refs/heads/prod" ]]; then
            echo "STAGE=prod" >> $GITHUB_OUTPUT
            echo "CONTAINER_APP_NAME=container-app-bot-live" >> $GITHUB_OUTPUT
            echo "BOT_TOKEN_SECRET=bottoken" >> $GITHUB_OUTPUT
          else
            echo "STAGE=dev" >> $GITHUB_OUTPUT
            echo "CONTAINER_APP_NAME=container-app-bot-dev" >> $GITHUB_OUTPUT
            echo "BOT_TOKEN_SECRET=bottoken" >> $GITHUB_OUTPUT
          fi

          # Set release tag based on event type and branch
          if [ "${{ github.event_name }}" == "release" ]; then
            if [[ "$BRANCH_REF" == "refs/heads/test" ]]; then
              echo "RELEASE_TAG=beta-${TAG_NAME}" >> $GITHUB_OUTPUT
            elif [[ "$BRANCH_REF" == "refs/heads/develop" ]]; then
              echo "RELEASE_TAG=alpha-${TAG_NAME}" >> $GITHUB_OUTPUT
            else
              echo "RELEASE_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
            fi
          else
            echo "RELEASE_TAG=manual-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

          echo "IMAGE_TAG=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Print deployment info
        run: |
          echo "Deployment Information:"
          echo "Event: ${{ github.event_name }}"
          echo "Branch Reference: ${{ github.ref }}"
          echo "Stage: ${{ steps.set_deployment_info.outputs.STAGE }}"
          echo "Container App Name: ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }}"
          echo "Release Tag: ${{ steps.set_deployment_info.outputs.RELEASE_TAG }}"
          echo "Image Tag: ${{ steps.set_deployment_info.outputs.IMAGE_TAG }}"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI extension for Container Apps
        run: az extension add --name containerapp --upgrade

      - name: Build and push image to ACR
        run: |
          az acr build --registry ca20a502fbd8acr \
            --image ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --file Dockerfile .

      - name: Check if Container App exists
        id: check_app
        continue-on-error: true
        run: |
          if az containerapp show --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} --resource-group container-app-rsgp &>/dev/null; then
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Azure Container App if not exists
        if: steps.check_app.outputs.EXISTS == 'false'
        run: |
          az containerapp create \
            --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            --resource-group container-app-rsgp \
            --environment container-app-managed-env \
            --registry-server ca20a502fbd8acr.azurecr.io \
            --image ca20a502fbd8acr.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --target-port 800 \
            --ingress external \
            --env-vars RELEASE_TAG=${{ steps.set_deployment_info.outputs.RELEASE_TAG }} \
                      STAGE=${{ steps.set_deployment_info.outputs.STAGE }} \
                      PYTHONUNBUFFERED=1 \
                      BOT_TOKEN="${{ secrets[steps.set_deployment_info.outputs.BOT_TOKEN_SECRET] }}" \
                      API_ID="${{ secrets.API_ID }}" \
                      API_HASH="${{ secrets.API_HASH }}"

      - name: Update Azure Container App if exists
        if: steps.check_app.outputs.EXISTS == 'true'
        run: |
          az containerapp update \
            --name ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            --resource-group container-app-rsgp \
            --image ca20a502fbd8acr.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --set-env-vars RELEASE_TAG=${{ steps.set_deployment_info.outputs.RELEASE_TAG }} \
                          STAGE=${{ steps.set_deployment_info.outputs.STAGE }} \
                          PYTHONUNBUFFERED=1 \
                          BOT_TOKEN="${{ secrets[steps.set_deployment_info.outputs.BOT_TOKEN_SECRET] }}" \
                          API_ID="${{ secrets.API_ID }}" \
                          API_HASH="${{ secrets.API_HASH }}"

      - name: Wait for deployment and cleanup old revisions
        run: |
          echo "Waiting for new revision to become active..."
          sleep 30
          
          echo "Cleaning up old revisions..."
          az containerapp revision list \
            -n ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
            -g container-app-rsgp \
            --query "[?!active].name" -o tsv | while read -r revision; do
            if [ ! -z "$revision" ]; then
              echo "Deactivating revision: $revision"
              az containerapp revision deactivate \
                -n ${{ steps.set_deployment_info.outputs.CONTAINER_APP_NAME }} \
                -g container-app-rsgp \
                --revision "$revision"
            fi
          done