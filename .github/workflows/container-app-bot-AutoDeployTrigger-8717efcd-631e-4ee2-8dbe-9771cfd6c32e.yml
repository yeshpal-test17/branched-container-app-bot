name: Deploy Telegram Bot to Azure Container App

on:
  release:
    types: [prereleased, released]
  push:
    branches: [master, prod]
  pull_request:
    types: [closed]
    branches: [master, prod]

permissions: 
  contents: read

  
env:
  ACR_NAME: ca20a502fbd8acr
  RESOURCE_GROUP: container-app-rsgp
  CONTAINER_APP_NAME: branched-container-app-bot
  PROD_REVISION_SUFFIX: prod-revision
  DEV_REVISION_SUFFIX: dev-revision

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


          
      - name: Set deployment info
        id: set_deployment_info
        run: |
            # First determine if this is a release
            if [ "${{ github.event_name }}" == "release" ]; then
              # Get the release tag
              TAG_NAME="${{ github.event.release.tag_name }}"
              echo "RELEASE_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
              
              # Set image tag based on release tag
              echo "IMAGE_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
              
              # Set other variables based on the target branch
              TARGET_BRANCH="${{ github.event.release.target_commitish }}"
              case "$TARGET_BRANCH" in
                "develop")
                  echo "CONTAINER_NAME=container-app-bot-dev" >> $GITHUB_OUTPUT
                  echo "STAGE=dev" >> $GITHUB_OUTPUT
                  echo "BOT_TOKEN_SECRET=dev-bot-token" >> $GITHUB_OUTPUT
                  ;;
                "test")
                  echo "CONTAINER_NAME=container-app-bot-test" >> $GITHUB_OUTPUT
                  echo "STAGE=test" >> $GITHUB_OUTPUT
                  echo "BOT_TOKEN_SECRET=test-bot-token" >> $GITHUB_OUTPUT
                  ;;
                *)
                  echo "Error: Releases are only supported from develop or test branches"
                  exit 1
                  ;;
              esac
              echo "IS_PROD=false" >> $GITHUB_OUTPUT
              echo "REVISION_SUFFIX=${{ env.DEV_REVISION_SUFFIX }}" >> $GITHUB_OUTPUT
              
            else
              # Handle non-release deployments
              if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
                echo "IS_PROD=true" >> $GITHUB_OUTPUT
                echo "CONTAINER_NAME=container-app-bot-prod" >> $GITHUB_OUTPUT
                echo "STAGE=prod" >> $GITHUB_OUTPUT
                echo "BOT_TOKEN_SECRET=prod-bot-token" >> $GITHUB_OUTPUT
                echo "IMAGE_TAG=prod-latest" >> $GITHUB_OUTPUT
                echo "REVISION_SUFFIX=${{ env.PROD_REVISION_SUFFIX }}" >> $GITHUB_OUTPUT
              else
                echo "IS_PROD=false" >> $GITHUB_OUTPUT
                case "${{ github.ref }}" in
                  "refs/heads/develop")
                    echo "CONTAINER_NAME=container-app-bot-dev" >> $GITHUB_OUTPUT
                    echo "STAGE=dev" >> $GITHUB_OUTPUT
                    echo "BOT_TOKEN_SECRET=dev-bot-token" >> $GITHUB_OUTPUT
                    echo "IMAGE_TAG=dev-latest" >> $GITHUB_OUTPUT
                    ;;
                  "refs/heads/test")
                    echo "CONTAINER_NAME=container-app-bot-test" >> $GITHUB_OUTPUT
                    echo "STAGE=test" >> $GITHUB_OUTPUT
                    echo "BOT_TOKEN_SECRET=test-bot-token" >> $GITHUB_OUTPUT
                    echo "IMAGE_TAG=test-latest" >> $GITHUB_OUTPUT
                    ;;
                  "refs/heads/master")
                    echo "CONTAINER_NAME=container-app-bot-staging" >> $GITHUB_OUTPUT
                    echo "STAGE=staging" >> $GITHUB_OUTPUT
                    echo "BOT_TOKEN_SECRET=master-bot-token" >> $GITHUB_OUTPUT
                    echo "IMAGE_TAG=staging-latest" >> $GITHUB_OUTPUT
                    ;;
                esac
                echo "REVISION_SUFFIX=${{ env.DEV_REVISION_SUFFIX }}" >> $GITHUB_OUTPUT
              fi
  
              # Set release tag for non-release events
              if [ "${{ github.event_name }}" == "push" ]; then
                echo "RELEASE_TAG=pushed-into-${{ github.ref_name }}" >> $GITHUB_OUTPUT
              elif [ "${{ github.event_name }}" == "pull_request" ]; then
                echo "RELEASE_TAG=merged-into-${{ github.base.ref }}" >> $GITHUB_OUTPUT
              else
                echo "RELEASE_TAG=manual-trigger" >> $GITHUB_OUTPUT
              fi
            fi
  
            # Debug output
            echo "Selected configuration:"
            echo "CONTAINER_NAME: ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}"
            echo "IMAGE_TAG: ${{ steps.set_deployment_info.outputs.IMAGE_TAG }}"
            echo "STAGE: ${{ steps.set_deployment_info.outputs.STAGE }}"
            echo "RELEASE_TAG: ${{ steps.set_deployment_info.outputs.RELEASE_TAG }}"
  
      - name: Build and push image to ACR
        run: |
            # Debug output
            echo "Building image: ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }}"
            
            # Clean up old images with the same tag
            az acr repository delete \
              --name ${{ env.ACR_NAME }} \
              --image ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
              --yes || true
  
            # Build and push new image
            az acr build \
              --registry ${{ env.ACR_NAME }} \
              --image ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
              --file Dockerfile \
              .

              
              
      - name: Manage Container App Revisions
        run: |
                      echo "Getting current revision information..."
                      
                      # Get all revisions
                      ALL_REVISIONS=$(az containerapp revision list \
                        -n ${{ env.CONTAINER_APP_NAME }} \
                        -g ${{ env.RESOURCE_GROUP }} \
                        --query "[].{name:name, active:properties.active, createdTime:properties.createdTime}" -o json)
                      
                      if [ "${{ steps.set_deployment_info.outputs.IS_PROD }}" == "true" ]; then
                        echo "Managing PROD revision..."
                        
                        # Get current prod revision
                        CURRENT_PROD_REVISION=$(echo "$ALL_REVISIONS" | jq -r '.[] | select(.name | contains("prod-")) | .name' | head -n 1)
                        
                        # Get current timestamp for new prod revision
                        TIMESTAMP=$(date +%Y%m%d%H%M%S)
                        NEW_PROD_REVISION="prod-${TIMESTAMP}"
      
                        # First, remove any existing revisions to clean slate
                        echo "Removing existing revisions..."
                        az containerapp revision list \
                          -n ${{ env.CONTAINER_APP_NAME }} \
                          -g ${{ env.RESOURCE_GROUP }} \
                          --query "[].name" -o tsv | while read -r revision; do
                          if [ -n "$revision" ]; then
                            echo "Deactivating and deleting revision: $revision"
                            az containerapp revision deactivate \
                              --name ${{ env.CONTAINER_APP_NAME }} \
                              --resource-group ${{ env.RESOURCE_GROUP }} \
                              --revision "$revision" || true
                            az containerapp revision delete \
                              --name ${{ env.CONTAINER_APP_NAME }} \
                              --resource-group ${{ env.RESOURCE_GROUP }} \
                              --revision "$revision" --yes || true
                          fi
                        done
                        
                        # Create new prod revision
                        echo "Creating new prod revision: ${NEW_PROD_REVISION}"
                        az containerapp update \
                          --name ${{ env.CONTAINER_APP_NAME }} \
                          --resource-group ${{ env.RESOURCE_GROUP }} \
                          --remove containers \
                          --containers container-app-bot-prod=${{ env.ACR_NAME }}.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
                          --revision-suffix "${NEW_PROD_REVISION}" \
                          --min-replicas 1 \
                          --max-replicas 10 \
                          --environment-variables \
                            RELEASE_TAG="${{ steps.set_deployment_info.outputs.RELEASE_TAG }}" \
                            STAGE="${{ steps.set_deployment_info.outputs.STAGE }}" \
                            PYTHONUNBUFFERED="1" \
                          --secrets \
                            "BOT_TOKEN=${{ steps.set_deployment_info.outputs.BOT_TOKEN_SECRET }}" \
                            "API_ID=api-id" \
                            "API_HASH=api-hash"
                      
                      else
                        echo "Managing DEV revision..."
                        
                        # Get current active dev revision
                        CURRENT_DEV_REVISION=$(echo "$ALL_REVISIONS" | jq -r '.[] | select(.name | contains("dev-") and .active == true) | .name' | head -n 1)
                        
                        # Get timestamp for new dev revision
                        TIMESTAMP=$(date +%Y%m%d%H%M%S)
                        NEW_DEV_REVISION="dev-${TIMESTAMP}"
      
                        # First, remove any existing revisions to clean slate
                        echo "Removing existing revisions..."
                        az containerapp revision list \
                          -n ${{ env.CONTAINER_APP_NAME }} \
                          -g ${{ env.RESOURCE_GROUP }} \
                          --query "[].name" -o tsv | while read -r revision; do
                          if [ -n "$revision" ]; then
                            echo "Deactivating and deleting revision: $revision"
                            az containerapp revision deactivate \
                              --name ${{ env.CONTAINER_APP_NAME }} \
                              --resource-group ${{ env.RESOURCE_GROUP }} \
                              --revision "$revision" || true
                            az containerapp revision delete \
                              --name ${{ env.CONTAINER_APP_NAME }} \
                              --resource-group ${{ env.RESOURCE_GROUP }} \
                              --revision "$revision" --yes || true
                          fi
                        done
                        
                        # Create new dev revision
                        echo "Creating new dev revision: ${NEW_DEV_REVISION}"
                        az containerapp update \
                          --name ${{ env.CONTAINER_APP_NAME }} \
                          --resource-group ${{ env.RESOURCE_GROUP }} \
                          --remove containers \
                          --containers ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}=${{ env.ACR_NAME }}.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
                          --revision-suffix "${NEW_DEV_REVISION}" \
                          --min-replicas 0 \
                          --max-replicas 5 \
                          --environment-variables \
                            RELEASE_TAG="${{ steps.set_deployment_info.outputs.RELEASE_TAG }}" \
                            STAGE="${{ steps.set_deployment_info.outputs.STAGE }}" \
                            PYTHONUNBUFFERED="1" \
                          --secrets \
                            "BOT_TOKEN=${{ steps.set_deployment_info.outputs.BOT_TOKEN_SECRET }}" \
                            "API_ID=api-id" \
                            "API_HASH=api-hash"
                      fi
      
      - name: Verify Deployment
        run: |
                      echo "Verifying deployment..."
                      sleep 60
                      
                      # Get current active revisions
                      ACTIVE_REVISIONS=$(az containerapp revision list \
                        -n ${{ env.CONTAINER_APP_NAME }} \
                        -g ${{ env.RESOURCE_GROUP }} \
                        --query "[?properties.active].{name:name, replicas:properties.replicas}" -o json)
                      
                      echo "Current active revisions:"
                      echo "$ACTIVE_REVISIONS" | jq '.'
                      
                      # Get expected suffix pattern
                      if [ "${{ steps.set_deployment_info.outputs.IS_PROD }}" == "true" ]; then
                        SUFFIX_PATTERN="prod-"
                      else
                        SUFFIX_PATTERN="dev-"
                      fi
                      
                      # Verify correct revision is active
                      if echo "$ACTIVE_REVISIONS" | jq -e ".[] | select(.name | contains(\"$SUFFIX_PATTERN\"))" > /dev/null; then
                        echo "✅ Deployment successful - Found active revision with correct suffix"
                      else
                        echo "❌ Deployment verification failed - No matching active revision found"
                        exit 1
                      fi