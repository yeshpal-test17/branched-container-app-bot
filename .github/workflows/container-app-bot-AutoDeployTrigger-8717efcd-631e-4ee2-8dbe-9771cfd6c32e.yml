name: Deploy Telegram Bot to Azure Container App

on:
  release:
    types: [prereleased, released]
  push:
    branches: [master, prod]
  pull_request:
    types: [closed]
    branches: [master, prod]

permissions: 
  contents: read

env:
  ACR_NAME: ca20a502fbd8acr
  RESOURCE_GROUP: container-app-rsgp
  CONTAINER_APP_NAME: branched-container-app-bot
  PROD_REVISION_SUFFIX: prod-revision
  DEV_REVISION_SUFFIX: dev-revision

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set deployment info
        id: set_deployment_info
        run: |
          # For releases, use the target branch instead of the tag ref
          if [ "${{ github.event_name }}" == "release" ]; then
            BRANCH_REF="refs/heads/${{ github.event.release.target_commitish }}"
            TAG_NAME="${{ github.event.release.tag_name }}"
            
            # Validate tag format based on branch
            if [[ "$BRANCH_REF" == "refs/heads/develop" ]]; then
              if [[ ! "$TAG_NAME" =~ ^alpha-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Error: Invalid tag format for develop branch. Must be 'alpha-x.y.z'"
                exit 1
              fi
              echo "RELEASE_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
            elif [[ "$BRANCH_REF" == "refs/heads/test" ]]; then
              if [[ ! "$TAG_NAME" =~ ^beta-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Error: Invalid tag format for test branch. Must be 'beta-x.y.z'"
                exit 1
              fi
              echo "RELEASE_TAG=${TAG_NAME}" >> $GITHUB_OUTPUT
            else
              echo "Error: Releases are only allowed from develop or test branches."
              exit 1
            fi
          else
            BRANCH_REF="${{ github.ref }}"
          fi

          # Set environment variables based on branch
          case "$BRANCH_REF" in
            "refs/heads/develop")
              echo "STAGE=dev" >> $GITHUB_OUTPUT
              echo "CONTAINER_NAME=container-app-bot-dev" >> $GITHUB_OUTPUT
              echo "BOT_TOKEN_SECRET=dev-bot-token" >> $GITHUB_OUTPUT
              echo "IMAGE_TAG=dev-latest" >> $GITHUB_OUTPUT
              echo "IS_PROD=false" >> $GITHUB_OUTPUT
              echo "REVISION_SUFFIX=${{ env.DEV_REVISION_SUFFIX }}" >> $GITHUB_OUTPUT
              ;;
            "refs/heads/test")
              echo "STAGE=test" >> $GITHUB_OUTPUT
              echo "CONTAINER_NAME=container-app-bot-test" >> $GITHUB_OUTPUT
              echo "BOT_TOKEN_SECRET=test-bot-token" >> $GITHUB_OUTPUT
              echo "IMAGE_TAG=test-latest" >> $GITHUB_OUTPUT
              echo "IS_PROD=false" >> $GITHUB_OUTPUT
              echo "REVISION_SUFFIX=${{ env.DEV_REVISION_SUFFIX }}" >> $GITHUB_OUTPUT
              ;;
            "refs/heads/master")
              echo "STAGE=staging" >> $GITHUB_OUTPUT
              echo "CONTAINER_NAME=container-app-bot-staging" >> $GITHUB_OUTPUT
              echo "BOT_TOKEN_SECRET=master-bot-token" >> $GITHUB_OUTPUT
              echo "IMAGE_TAG=staging-latest" >> $GITHUB_OUTPUT
              echo "IS_PROD=false" >> $GITHUB_OUTPUT
              echo "REVISION_SUFFIX=${{ env.DEV_REVISION_SUFFIX }}" >> $GITHUB_OUTPUT
              ;;
            "refs/heads/prod")
              echo "STAGE=prod" >> $GITHUB_OUTPUT
              echo "CONTAINER_NAME=container-app-bot-prod" >> $GITHUB_OUTPUT
              echo "BOT_TOKEN_SECRET=prod-bot-token" >> $GITHUB_OUTPUT
              echo "IMAGE_TAG=prod-latest" >> $GITHUB_OUTPUT
              echo "IS_PROD=true" >> $GITHUB_OUTPUT
              echo "REVISION_SUFFIX=${{ env.PROD_REVISION_SUFFIX }}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Error: Unsupported branch" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac

          # Set release tag for other events
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "RELEASE_TAG=pushed-into-${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "RELEASE_TAG=merged-into-${{ github.base.ref }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" != "release" ]; then
            echo "RELEASE_TAG=manual-trigger" >> $GITHUB_OUTPUT
          fi

      - name: Build and push image to ACR
        run: |
          # Clean up old images with the same tag if they exist
          az acr repository delete \
            --name ${{ env.ACR_NAME }} \
            --image ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --yes || true

          # Build and push new image
          az acr build --registry ${{ env.ACR_NAME }} \
            --image ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
            --file Dockerfile .

      - name: Manage Container App Revisions
        run: |
              # Get current timestamp for unique suffix
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              
              # Get all active revisions
              ACTIVE_REVISIONS=$(az containerapp revision list \
                -n ${{ env.CONTAINER_APP_NAME }} \
                -g ${{ env.RESOURCE_GROUP }} \
                --query "[?properties.active].name" -o tsv)
              
              echo "Active revisions: $ACTIVE_REVISIONS"
              
              if [ "${{ steps.set_deployment_info.outputs.IS_PROD }}" == "true" ]; then
                echo "Managing PROD revision..."
                MIN_REPLICAS="1"
                MAX_REPLICAS="10"
                # Create unique suffix for prod
                REVISION_SUFFIX="prod-${TIMESTAMP}"
                
                # Get all prod revisions ordered by creation time
                PROD_REVISIONS=$(az containerapp revision list \
                  -n ${{ env.CONTAINER_APP_NAME }} \
                  -g ${{ env.RESOURCE_GROUP }} \
                  --query "[?contains(name, 'prod-')].{name:name, createdTime:properties.createdTime} | sort_by(@, &createdTime)" -o tsv)
                
                echo "Existing prod revisions:"
                echo "$PROD_REVISIONS"
                
                # Keep count of prod revisions
                PROD_REVISION_COUNT=$(echo "$PROD_REVISIONS" | wc -l)
                
                # If we have more than 3 prod revisions, deactivate the oldest ones
                if [ "$PROD_REVISION_COUNT" -gt 3 ]; then
                  echo "More than 3 prod revisions found. Deactivating older revisions..."
                  REVISIONS_TO_REMOVE=$((PROD_REVISION_COUNT - 3))
                  echo "$PROD_REVISIONS" | head -n "$REVISIONS_TO_REMOVE" | while read -r revision; do
                    echo "Deactivating old prod revision: $revision"
                    az containerapp revision deactivate \
                      --name ${{ env.CONTAINER_APP_NAME }} \
                      --resource-group ${{ env.RESOURCE_GROUP }} \
                      --revision "$revision"
                  done
                fi
                
              else
                echo "Managing DEV revision..."
                MIN_REPLICAS="0"
                MAX_REPLICAS="5"
                # Create unique suffix for dev
                REVISION_SUFFIX="dev-${TIMESTAMP}"
                
                # For dev environments, deactivate any existing dev revisions
                for revision in $ACTIVE_REVISIONS; do
                  if [[ "$revision" == *"dev-"* ]]; then
                    echo "Deactivating existing dev revision: $revision"
                    az containerapp revision deactivate \
                      --name ${{ env.CONTAINER_APP_NAME }} \
                      --resource-group ${{ env.RESOURCE_GROUP }} \
                      --revision "$revision"
                  fi
                done
              fi
              
              echo "Deploying new revision with suffix: $REVISION_SUFFIX"
              
              # Deploy new revision
              az containerapp update \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.RESOURCE_GROUP }} \
                --container-name ${{ steps.set_deployment_info.outputs.CONTAINER_NAME }} \
                --image ${{ env.ACR_NAME }}.azurecr.io/${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}:${{ steps.set_deployment_info.outputs.IMAGE_TAG }} \
                --revision-suffix $REVISION_SUFFIX \
                --min-replicas $MIN_REPLICAS \
                --max-replicas $MAX_REPLICAS \
                --set-env-vars \
                  RELEASE_TAG=${{ steps.set_deployment_info.outputs.RELEASE_TAG }} \
                  STAGE=${{ steps.set_deployment_info.outputs.STAGE }} \
                  PYTHONUNBUFFERED=1 \
                  BOT_TOKEN=secretref:${{ steps.set_deployment_info.outputs.BOT_TOKEN_SECRET }} \
                  API_ID=secretref:api-id \
                  API_HASH=secretref:api-hash
          
      - name: Verify Deployment
        run: |
              echo "Verifying deployment..."
              
              # Increase wait time to ensure deployment is complete
              echo "Waiting for deployment to stabilize..."
              sleep 60
              
              # Get current active revisions
              ACTIVE_REVISIONS=$(az containerapp revision list \
                -n ${{ env.CONTAINER_APP_NAME }} \
                -g ${{ env.RESOURCE_GROUP }} \
                --query "[?properties.active].{name:name, replicas:properties.replicas, container:properties.template.containers[0].name}" -o json)
              
              echo "Current active revisions:"
              echo "$ACTIVE_REVISIONS" | jq '.'
              
              # Get timestamp from earlier for verification
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              # Define expected suffix pattern based on deployment type
              if [ "${{ steps.set_deployment_info.outputs.IS_PROD }}" == "true" ]; then
                SUFFIX_PATTERN="prod-"
              else
                SUFFIX_PATTERN="dev-"
              fi
              
              EXPECTED_CONTAINER="${{ steps.set_deployment_info.outputs.CONTAINER_NAME }}"
              echo "Looking for revision with suffix pattern: $SUFFIX_PATTERN and container: $EXPECTED_CONTAINER"
              
              # More detailed verification
              if echo "$ACTIVE_REVISIONS" | jq -e ".[] | select(.name | contains(\"$SUFFIX_PATTERN\")) | select(.container == \"$EXPECTED_CONTAINER\")" > /dev/null; then
                echo "✅ Deployment successful - Found active revision with correct suffix pattern and container"
                echo "Active revision details:"
                echo "$ACTIVE_REVISIONS" | jq ".[] | select(.name | contains(\"$SUFFIX_PATTERN\")) | select(.container == \"$EXPECTED_CONTAINER\")"
              else
                echo "❌ Deployment verification failed - No matching active revision found"
                echo "All active revisions:"
                echo "$ACTIVE_REVISIONS" | jq '.'
                exit 1
              fi