name: Multi-Environment Deployment

on:
  push:
    branches: [develop, test, master, pre-prod, prod]
  pull_request:
    types: [closed]
    branches: [develop, test, master, pre-prod, prod]
  release:
    types: [published]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: ca20a502fbd8acr.azurecr.io
  RESOURCE_GROUP: container-app-rsgp
  CONTAINER_APP_NAME: branched-container-app-bot

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - branch: develop
            environment: Development
            revision_suffix: dev
            release_prefix: alpha
          - branch: test
            environment: Test
            revision_suffix: test
            release_prefix: beta
          - branch: master
            environment: Staging
            revision_suffix: staging
            release_prefix: rc
          - branch: prod
            environment: Production
            revision_suffix: prod
            release_prefix: release

    environment: ${{ matrix.environment }}

    steps:
    - uses: actions/checkout@v2

    - name: Set up environment variables
      run: |
        echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
        else
          echo "RELEASE_TAG=${{ matrix.release_prefix }}-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
        fi
        echo "IMAGE_TAG=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push image to ACR
      run: |
        az acr build --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --image ${{ env.CONTAINER_APP_NAME }}:${{ env.IMAGE_TAG }} \
          --file Dockerfile .

    - name: Deploy to Azure Container App
      run: |
        az containerapp revision create \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_APP_NAME }}:${{ env.IMAGE_TAG }} \
          --suffix ${{ matrix.revision_suffix }} \
          --min-replicas ${{ matrix.environment == 'Production' && 1 || 0 }} \
          --max-replicas ${{ matrix.environment == 'Production' && 10 || 1 }} \
          --set-env-vars RELEASE_TAG=${{ env.RELEASE_TAG }} STAGE=${{ matrix.environment }} PYTHONUNBUFFERED=1

    - name: Activate new revision
      run: |
        az containerapp revision activate \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --revision ${{ env.CONTAINER_APP_NAME }}--${{ matrix.revision_suffix }}

    - name: Deactivate old revisions (non-prod only)
      if: ${{ matrix.environment != 'Production' }}
      run: |
        CURRENT_REVISION=$(az containerapp revision list --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "[?properties.active==\`true\` && contains(name, '${{ matrix.revision_suffix }}')].name" -o tsv)
        az containerapp revision deactivate --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --revision $CURRENT_REVISION