name: Multi-Environment Deployment

on:
  push:
    branches: [develop, test, master, pre-prod, prod]
  pull_request:
    types: [closed]
    branches: [develop, test, master, pre-prod, prod]
  release:
    types: [published]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: ${{ vars.ACR_NAME }}.azurecr.io
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
  CONTAINER_APP_NAME: ${{ vars.CONTAINER_APP_NAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          # Development Environment - Alpha releases
          - branch: develop
            environment: Development
            revision_suffix: dev-alpha
            release_prefix: alpha
            allowed_source_branches: |
              - develop
              - feature/*
            min_replicas: 0
            max_replicas: 1

          # Development Environment - Beta releases
          - branch: test
            environment: Development
            revision_suffix: dev-beta
            release_prefix: beta
            allowed_source_branches: |
              - develop
              - test
            min_replicas: 0
            max_replicas: 1

          # Staging Environment - Pre-prod
          - branch: pre-prod
            environment: Staging
            revision_suffix: staging-preprod
            release_prefix: rc
            allowed_source_branches: |
              - pre-prod
              - hotfix/*
            min_replicas: 0
            max_replicas: 2

          # Staging Environment - Master
          - branch: master
            environment: Staging
            revision_suffix: staging-master
            release_prefix: rc
            allowed_source_branches: |
              - master
              - pre-prod
            min_replicas: 0
            max_replicas: 2

          # Production Environment
          - branch: prod
            environment: Production
            revision_suffix: prod
            release_prefix: release
            allowed_source_branches: |
              - prod
              - master
            min_replicas: 1
            max_replicas: 10

    environment: ${{ matrix.environment }}
    
    if: |
      (github.event_name == 'push' && contains(matrix.allowed_source_branches, github.ref_name)) ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(matrix.allowed_source_branches, github.base_ref)) ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'release'

    steps:
    - uses: actions/checkout@v2

    - name: Set deployment info
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
        else
          echo "RELEASE_TAG=${{ matrix.release_prefix }}-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
        fi
        echo "IMAGE_TAG=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push image to ACR
      run: |
        az acr build --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --image ${{ env.CONTAINER_APP_NAME }}:${{ env.IMAGE_TAG }} \
          --file Dockerfile .

    - name: Deploy to Azure Container App
      run: |
        az containerapp revision create \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_APP_NAME }}:${{ env.IMAGE_TAG }} \
          --suffix ${{ matrix.revision_suffix }} \
          --min-replicas ${{ matrix.min_replicas }} \
          --max-replicas ${{ matrix.max_replicas }} \
          --set-env-vars \
            RELEASE_TAG=${{ env.RELEASE_TAG }} \
            STAGE=${{ matrix.environment }} \
            PYTHONUNBUFFERED=1 \
            BOT_TOKEN=${{ secrets.BOT_TOKEN }} \
            API_ID=${{ secrets.API_ID }} \
            API_HASH=${{ secrets.API_HASH }}

    - name: Activate new revision
      run: |
        az containerapp revision activate \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --revision ${{ env.CONTAINER_APP_NAME }}--${{ matrix.revision_suffix }}

    - name: Deactivate old revisions (non-prod only)
      if: ${{ matrix.environment != 'Production' }}
      run: |
        CURRENT_REVISION=$(az containerapp revision list \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "[?properties.active==\`true\` && contains(name, '${{ matrix.revision_suffix }}')].name" -o tsv)
        if [ ! -z "$CURRENT_REVISION" ]; then
          az containerapp revision deactivate \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --revision $CURRENT_REVISION
        fi